{"version":3,"file":"/Users/psantos/Desktop/IWA/CA/src/backend/middleware/auth_middleware.ts","sources":["/Users/psantos/Desktop/IWA/CA/src/backend/middleware/auth_middleware.ts"],"names":[],"mappings":";;;;;;;;;AACA,gDAAoC;AAIpC,wBACI,GAAoB,EACpB,GAAqB,EACrB,IAA0B;IAE1B,IAAI;QACA,kCAAkC;QAClC,IAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAC3C,qDAAqD;QACrD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC7C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;SAC1B;aAAM;YACH,yCAAyC;YACzC,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;YACvC,4DAA4D;YAC5D,IAAI,CAAC,MAAM,EAAE;gBACT,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;aAC1B;iBAAM;gBACH,IAAI,OAAO,SAAK,CAAC;gBACjB,IAAI;oBACA,+BAA+B;oBAC/B,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAQ,CAAC;iBAC9C;gBAAC,OAAM,CAAC,EAAE;oBACP,mDAAmD;oBACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;iBAC1B;gBACD,sCAAsC;gBACtC,sDAAsD;gBACrD,GAAW,CAAC,MAAM,GAAG,OAAO,CAAC,EAAE,CAAC;gBACjC,sBAAsB;gBACtB,IAAI,EAAE,CAAC;aACV;SACJ;KACJ;IAAC,OAAO,CAAC,EAAE;QACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;KAC1B;AACL,CAAC;AApCD,wCAoCC","sourcesContent":["\nimport * as jwt from \"jsonwebtoken\";\nimport { getRepository } from '../repositories/user_repository';\nimport express from \"express\";\n\nexport function authMiddleware(\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n) {\n    try {\n        // Read token from request headers\n        const token = req.headers[\"authorization\"];\n        // If no token not a string, it is an invalid request\n        if (token === undefined || Array.isArray(token)) {\n            res.status(400).send();\n        } else {\n            // Read secret from environment variables\n            const secret = process.env.AUTH_SECRET;\n            // If secret is undefined, there is an internal server error\n            if (!secret) {\n                res.status(500).send();\n            } else {\n                let decoded: any;\n                try {\n                    // Decode token and get user id\n                    decoded = jwt.verify(token, secret) as any;\n                } catch(e) {\n                    // If cannot decode token, the user is unauthorized\n                    res.status(401).send();\n                }\n                // Attach current user to request objs\n                // Note that we don't need to do additional db queries\n                (req as any).userId = decoded.id;\n                // Invoke next handler\n                next();\n            }\n        }\n    } catch (e) {\n        res.status(500).send();\n    }\n}"]}