{"version":3,"file":"/Users/psantos/Desktop/IWA/CA/src/backend/controllers/user_controller.ts","sources":["/Users/psantos/Desktop/IWA/CA/src/backend/controllers/user_controller.ts"],"names":[],"mappings":";;AAAA,mCAAoD;AACpD,mEAAgE;AAKhE,IAAM,UAAU,GAAG,gBAAM,EAAE,CAAC;AAoDnB,gCAAU;AAnDnB,oBAAoB;AACpB,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,GAAG;IAClC,IAAM,cAAc,GAAG,+BAAa,EAAE,CAAC;IACvC,cAAc,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;QAC5B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,CAAQ;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,6BAA6B;AAC7B,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,GAAG;IACnC,IAAM,cAAc,GAAG,+BAAa,EAAE,CAAC;IACvC,2BAA2B;IAC3B,IAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;IACjC,IAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACnC,IAAG,CAAC,SAAS,EAAC;QACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,GAAG,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;KAC7C;IACD,6BAA6B;IAC7B,kDAAkD;IAClD,cAAc,CAAC,IAAI,CAAC;QAChB,KAAK,EAAE,SAAS;QAChB,QAAQ,EAAE,QAAQ;KACrB,CAAC,CAAC;IAEH,sCAAsC;IACtC,6CAA6C;IAC7C,eAAe;IACf,gCAAgC;IAChC,qCAAqC;IACrC,QAAQ;IACR,MAAM;IAEN,wDAAwD;IACxD,mBAAmB;IACnB,uBAAuB;IACvB,gEAAgE;IAChE,IAAI;IAEJ,8BAA8B;IAC9B,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;QACrC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,CAAQ;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Router, Request, Response } from \"express\";\nimport { getRepository } from '../repositories/user_repository';\nimport { User } from \"../entities/user\";\nimport { Repository } from \"typeorm\";\nimport * as jwt from \"jsonwebtoken\";\n\nconst userRouter = Router();\n// Retruns all users\nuserRouter.get(\"/\", function (req, res) {\n    const userRepository = getRepository();\n    userRepository.find().then((user) => {\n        res.json(user);\n    }).catch((e: Error) => {\n        res.status(500);\n        res.send(e.message);\n    });\n});\n\n// Creates a new user account\nuserRouter.post(\"/\", function (req, res) {\n    const userRepository = getRepository();\n    //const newUser = req.body;\n    const userEmail = req.body.email;\n    const userPass = req.body.password;\n    if(!userEmail){\n        res.status(400);\n        res.send(`Invalid Username or Password!`);\n    } \n    //console.log(newUser.email);\n    //const userRepository = conn.getRepository(User);\n    userRepository.save({ \n        email: userEmail, \n        password: userPass,\n    });\n\n    // Check if the email is already taken\n    // const userCheck = userRepository.findOne({\n    //     where: {\n    //         email: newUser.email,\n    //         password: newUser.password\n    //     }\n    // });\n\n    // Return error 400 in case email has already been taken\n    // if (userCheck) {\n    //     res.status(400);\n    //     res.send(`Email already taken, please try another one.`);\n    // }\n\n    // Return the new user object.\n    userRepository.find(userEmail).then((user) => {\n        res.json(user);\n    }).catch((e: Error) => {\n        res.status(500);\n        res.send(e.message);\n    });\n});\n\nexport { userRouter };"]}