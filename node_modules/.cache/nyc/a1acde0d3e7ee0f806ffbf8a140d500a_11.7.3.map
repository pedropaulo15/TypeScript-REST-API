{"version":3,"file":"/Users/psantos/Desktop/IWA/CA/src/backend/controllers/link_controller.ts","sources":["/Users/psantos/Desktop/IWA/CA/src/backend/controllers/link_controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response } from \"express\";\nimport { getRepository } from '../repositories/link_repository';\nimport { Link } from \"../entities/link\";\nimport { Repository } from \"typeorm\";\nimport { authMiddleware } from \"../middleware/auth_middleware\";\n\n// Handle Errors\nconst linkRouter = Router();\n\nlinkRouter.get(\"/api/v1/links\", function (req, res) {\n    const linkRepository = getRepository();\n    linkRepository.find().then((link) => {\n        res.json(link);\n    }).catch((e: Error) => {\n        res.status(500);\n        res.send(e.message);\n    });\n});\n\nlinkRouter.post(\"/api/v1/links\", function (req, res) {\n    const linkRepository = getRepository();\n    const newLink = req.body;\n    if(!(typeof newLink.title === \"string\")){\n        res.status(400);\n        res.send(`Invalid Link!`);\n    }\n    linkRepository.find(newLink).then((link) => {\n        res.json(link);\n    }).catch((e: Error) => {\n        res.status(500);\n        res.send(e.message);\n    });\n});\n\nexport { linkRouter };\n\n// Handle HTTP requests\nexport function getHandlers(_linkRepository: Repository<Link>) {\n    \n    const getAllLinksHandler = (req: Request, res: Response) => {\n        (async () => {\n            const links = await _linkRepository.find();\n            res.json(links).send();\n        })();\n    };\n    \n    const getLinkByIdHandler = (req: Request, res: Response) => {\n        const id = parseInt(req.params.id);\n        const link = _linkRepository.findOne({\n            where: {\n                id: id\n            }\n        });\n        res.json(link).send();\n        if (link === undefined) {\n            res.status(404).send();\n        }\n        res.json(link).send();\n    };\n\n    const createLink = (req: Request, res: Response) => {\n        (async () => {\n            const title = req.body.title;\n            if (!title) {\n                res.status(400).send();\n            } else {\n                const newLink = await _linkRepository.save({ title: title});\n                return res.json(newLink);\n            }            \n        })();\n    };\n\n    const deleteLink =  (req: Request, res: Response) => {\n        // TODO\n        res.json({});\n    };\n\n    return {\n        getAllLinksHandler,\n        getLinkByIdHandler,\n        createLink,\n        deleteLink\n    };\n}\n\nexport function getLinksRouter() {\n    const handlers = getHandlers(getRepository());\n    const linkRouter = Router();\n    // Returns all links\n    linkRouter.get(\"/\", handlers.getAllLinksHandler); // public\n    // Creates a new link\n    linkRouter.post(\"/\", authMiddleware, handlers.createLink); // private\n    // Deletes a link by ID\n    linkRouter.delete(\"/:id\", authMiddleware, handlers.deleteLink); // private\n    // Upvotes link\n    linkRouter.post(\"/:id/upvote\", authMiddleware, handlers.createLink); // private\n    // Downvotes link\n    linkRouter.post(\"/:id/downvote\", authMiddleware, handlers.createLink); // private\n    // Returns a link by ID\n    linkRouter.get(\"/:id/\", handlers.getLinkByIdHandler); // public\n    \n    return linkRouter;\n}"]}