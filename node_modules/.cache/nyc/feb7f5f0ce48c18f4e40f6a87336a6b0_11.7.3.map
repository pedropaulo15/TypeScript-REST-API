{"version":3,"file":"/Users/psantos/Desktop/IWA/CA/src/backend/controllers/user_controller.ts","sources":["/Users/psantos/Desktop/IWA/CA/src/backend/controllers/user_controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response } from \"express\";\nimport { getRepository } from '../repositories/user_repository';\nimport { User } from \"../entities/user\";\nimport { Repository } from \"typeorm\";\nimport * as jwt from \"jsonwebtoken\";\n\nconst userRouter = Router();\n// Retruns all users\nuserRouter.get(\"/api/v1/users\", function (req, res) {\n    const userRepository = getRepository();\n    userRepository.find().then((user) => {\n        res.json(user);\n    }).catch((e: Error) => {\n        res.status(500);\n        res.send(e.message);\n    });\n});\n\n// Creates a new user account\nuserRouter.post(\"/api/v1/users\", function (req, res) {\n    const userRepository = getRepository();\n    const newUser = req.body;\n    if(!(typeof newUser.email === \"string\" || typeof newUser.password === \"string\")){\n        res.status(400);\n        res.send(`Invalid Username or Password!`);\n    } \n\n    // Check if the email is already taken\n    const userCheck = userRepository.findOne({\n        where: {\n            email: newUser.email,\n            password: newUser.password\n        }\n    });\n    // Return error 400 in case email has already been taken\n    if (userCheck) {\n        res.status(400);\n        res.send(`Email already taken, please try another one.`);\n    }\n    // Return the new user object.\n    userRepository.find(newUser).then((user) => {\n        res.json(user);\n    }).catch((e: Error) => {\n        res.status(500);\n        res.send(e.message);\n    });\n});\n\nexport { userRouter };\n\n// Handle HTTP requests\n// export function getHandlers(_userRepository: Repository<User>) {\n    \n//     const getAllUsersHandler = (req: Request, res: Response) => {\n//         (async () => {\n//             const users = await _userRepository.find();\n//             res.json(users).send();\n//         })();\n//     };\n    \n//     const getUserByIdHandler = (req: Request, res: Response) => {\n//         const id = parseInt(req.params.id);\n//         const user = _userRepository.findOne({\n//             where: {\n//                 id: id\n//             }\n//         });\n//         if (user === undefined) {\n//             res.status(404).send();\n//         }\n//         res.json(user).send();\n//     };\n\n//     const createUser = (req: Request, res: Response) => {\n//         (async () => {\n//             const email = req.body.email;\n//             const password = req.body.password;\n//             if (!email || password) {\n//                 res.status(400).send();\n//             } else {\n//                 const newuser = await _userRepository.save({ email: email, password: password});\n//                 return res.json(newuser);\n//             }            \n//         })();\n//     };\n\n//     const deleteUser =  (req: Request, res: Response) => {\n//         // TODO\n//         res.json({});\n//     };\n\n//     const getTokenHandler = (req: Request, res: Response) => {\n//         (async () => {\n//             const body = req.body;\n//             const email = body.email;\n//             const password = body.password;\n//             if (!email || !password) {\n//                 res.status(400).send();\n//             } else {\n//                 const user = await _userRepository.findOne({\n//                     where: {\n//                         email: email,\n//                         password: password\n//                     }\n//                 });\n//                 if (!user) {\n//                     res.status(401).send();\n//                 } else {\n//                     const payload = { id: user.id };\n//                     const secret = process.env.AUTH_SECRET;\n//                     if (typeof secret === \"string\") {\n//                         const token = jwt.sign(payload, secret);\n//                         res.json({ token: token });\n//                     } else {\n//                         res.status(500).send();\n//                     }\n//                 }\n//             }\n//         })();\n//     };\n\n//     return {\n//         getAllUsersHandler,\n//         getUserByIdHandler,\n//         createUser,\n//         deleteUser,\n//         getTokenHandler\n//     };\n// }\n\n// export function getLinksRouter() {\n//     const handlers = getHandlers(getRepository());\n//     const userRouter = Router();\n//     userRouter.post(\"/api/v1/users\", handlers.getTokenHandler);\n//     return userRouter;\n// }"]}