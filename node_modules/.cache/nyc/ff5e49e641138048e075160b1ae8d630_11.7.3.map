{"version":3,"file":"/Users/psantos/Desktop/IWA/CA/src/backend/controllers/auth_controller.ts","sources":["/Users/psantos/Desktop/IWA/CA/src/backend/controllers/auth_controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAoD;AACpD,mEAAgE;AAGhE,gDAAoC;AAEpC,qBAA4B,eAAiC;IAA7D,iBAkCC;IAhCG,IAAM,eAAe,GAAG,UAAC,GAAY,EAAE,GAAa;QAChD,CAAC;;;;;wBACS,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;wBAChB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACnB,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;6BAC3B,CAAA,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAA,EAAnB,wBAAmB;wBACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;;4BAEV,qBAAM,eAAe,CAAC,OAAO,CAAC;4BACvC,KAAK,EAAE;gCACH,KAAK,EAAE,KAAK;gCACZ,QAAQ,EAAE,QAAQ;6BACrB;yBACJ,CAAC,EAAA;;wBALI,IAAI,GAAG,SAKX;wBACF,IAAI,CAAC,IAAI,EAAE;4BACP,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;yBAC1B;6BAAM;4BACG,OAAO,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;4BAC1B,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;4BACvC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gCACtB,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gCACxC,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;6BAC9B;iCAAM;gCACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;6BAC1B;yBACJ;;;;;aAER,CAAC,EAAE,CAAC;IACT,CAAC,CAAC;IACF,OAAO;QACH,eAAe,iBAAA;KAClB,CAAC;AACN,CAAC;AAlCD,kCAkCC;AAED;IACI,IAAM,QAAQ,GAAG,WAAW,CAAC,+BAAa,EAAE,CAAC,CAAC;IAC9C,IAAM,UAAU,GAAG,gBAAM,EAAE,CAAC;IAC5B,wBAAwB;IACxB,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,eAAe,CAAC,CAAC;IACrD,OAAO,UAAU,CAAC;AACtB,CAAC;AAND,sCAMC","sourcesContent":["import { Router, Request, Response } from \"express\";\nimport { getRepository } from \"../repositories/user_repository\";\nimport { Repository } from \"typeorm\";\nimport { User } from \"../entities/user\";\nimport * as jwt from \"jsonwebtoken\";\n\nexport function getHandlers(_userRepository: Repository<User>) {\n    \n    const getTokenHandler = (req: Request, res: Response) => {\n        (async () => {\n            const body = req.body;\n            const email = body.email;\n            const password = body.password;\n            if (!email || !password) {\n                res.status(400).send();\n            } else {\n                const user = await _userRepository.findOne({\n                    where: {\n                        email: email,\n                        password: password\n                    }\n                });\n                if (!user) {\n                    res.status(401).send();\n                } else {\n                    const payload = { id: user.id };\n                    const secret = process.env.AUTH_SECRET;\n                    if (typeof secret === \"string\") {\n                        const token = jwt.sign(payload, secret);\n                        res.json({ token: token });\n                    } else {\n                        res.status(500).send();\n                    }\n                }\n            }\n        })();\n    };\n    return {\n        getTokenHandler\n    };\n}\n\nexport function getAuthRouter() {\n    const handlers = getHandlers(getRepository());\n    const authRouter = Router();\n    // Returns an auth token\n    authRouter.post(\"/login/\", handlers.getTokenHandler);\n    return authRouter;\n}\n"]}